package bot

import (
	"fmt"
	"strings"

	"github.com/comov/hsearch/structs"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

const startMessage = `
–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä. –û—Å–Ω–æ–≤–Ω–æ–µ –µ–≥–æ –ø—Ä–∏–µ–º—É—â–µ—Å—Ç–≤–æ —ç—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º –∫–≤–∞—Ä—Ç–∏—Ä–∞–º. –≠—Ç–æ –Ω–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç, –∫–æ–¥ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ. –ï—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏, –æ—Å—Ç–∞–≤–ª—è–π —Ñ–∏–¥–±–µ–∫ :)

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/stop - –∏—Å–∫–ª—é—á–∏—Ç –í–∞—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –±–æ—Ç–∞
/search - –≤–∫–ª—é—á–∏—Ç –ø–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä, –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –í–∞–º –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∫–∞–∫ –Ω–∞–π–¥–µ—Ç
/feedback <text> - –æ—Ç—Å—Ç–∞–≤–∏—Ç—å –≥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É üòê
`

const feedbackText = `–ë–æ—Ç –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –æ—Ç —Ç–µ–±—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ –º–∏–Ω—É—Ç 5, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å —Ñ–∏–¥–±—ç–∫–æ–º`
const wrongAnswerText = `–¢–æ –ª–∏ —è —Ç—É–ø–æ–π, —Ç–æ –ª–∏ –ª—ã–∂–∏. –ü–æ—Å–º–æ—Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ—Ä: %d`
const stopNotFound = `%s –Ω–µ—Ç –≤ –±–∞–∑–µ. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ —è %s –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—é`

func DefaultMessage(offer *structs.Offer) string {
	var message strings.Builder
	message.WriteString(offer.Topic)
	message.WriteString("\n\n")

	if offer.FullPrice != "" {
		message.Grow(len("–¶–µ–Ω–∞: ") + len(offer.FullPrice) + len("\n"))
		message.WriteString("–¶–µ–Ω–∞: ")
		message.WriteString(offer.FullPrice)
		message.WriteString("\n")
	}

	if offer.Rooms != "" {
		message.Grow(len("–ö–æ–º–Ω–∞—Ç: ") + len(offer.Rooms) + len("\n"))
		message.WriteString("–ö–æ–º–Ω–∞—Ç: ")
		message.WriteString(offer.Rooms)
		message.WriteString("\n")
	}

	if offer.Phone != "" {
		message.Grow(len("–ù–æ–º–µ—Ä: ") + len(offer.Phone) + len("\n"))
		message.WriteString("–ù–æ–º–µ—Ä: ")
		message.WriteString(offer.Phone)
		message.WriteString("\n")
	}

	message.Grow(len("–°—Å—ã–ª–∫–∞: ") + len(offer.Url) + len("\n"))
	message.WriteString("–°—Å—ã–ª–∫–∞: ")
	message.WriteString(offer.Url)
	message.WriteString("\n")
	return message.String()
}

func WaitPhotoMessage(count int) string {
	handler := func(end string) string {
		message := "–©–∞ –æ—Ç–ø—Ä–∞–≤–ª—é %d —Ñ–æ—Ç%s. –≠—Ç–æ –¥–æ–ª–≥–æ, –∂–¥–∏..."
		return fmt.Sprintf(message, count, end)
	}
	if count == 1 || count == 21 || count == 31 {
		return handler("–∫—É")
	}
	if (count > 1 && count < 5) || (count > 21 && count < 25) {
		return handler("–∫–∏")
	}
	if (count >= 5 && count < 21) || (count >= 25 && count < 31) {
		return handler("–æ–∫")
	}

	return "–©–∞ –æ—Ç–ø—Ä–∞–≤–ª—é –ø–∞—Ä—É —Ñ–æ—Ç–æ–∫. –≠—Ç–æ –¥–æ–ª–≥–æ, –∂–¥–∏..."
}

func getFeedbackAdminText(chat *tgbotapi.Chat, text string) string {
	msg := ""
	if chat.IsPrivate() {
		msg += fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s %s\n–° –Ω–∏–∫–æ–º: %s\n\n",
			chat.FirstName,
			chat.LastName,
			chat.UserName,
		)
	} else {
		msg += fmt.Sprintf("–í –≥—Ä—É–ø–ø–µ: %s\n\n", chat.Title)
	}

	msg += fmt.Sprintf("–û—Å—Ç–∞–≤–∏–ª–∏ feedback:\n%s", text)
	return msg
}
